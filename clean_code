
整洁代码
	目的
		展示好程序员的思维过程
		使用的技巧、技术
	何为整洁
		读起来令人愉悦和简单
			小块代码
		明确的展现解决问题张力
		便于其他人加以增补
		没有重复代码
			提早构建抽象
			
有意义命名
	名副其实
		不需要注释补充
		意义明确
	不要使用有歧义，误导的命名
		一词一意
		别用双关
	有意义的区分
		勿用a1、a2...
	避免使用魔术数
		单字母A，单数字10
	类名和方法名
		名词或名词短语
		动词或动词短语
	一以贯之的命名
		不能同时有controller，manager，driver
	程序员易理解的技术性名
		避免强制使用客户给的名字
	添加有意义语境
		可以变量名前加前缀说明语境

函数
	短小
		<=20
		缩进层级（逻辑判断）不该多余一层或两层
	只做一件事
		函数语句都要在同一个抽象层级
	函数名（动词）
		易阅读
		命名方式要一致
		不能含有与名字意义不符的逻辑
	函数参数（名词）
	数量
		0个  
			最好
		1个	 
			可以
		2个	 
			凑合,如坐标x，y
		3个	 
			避免
		3个以上	
			将多个参数封装为类传递
	返回值返回
		建议，不建议输出参数输出
	标识参数如bool值
		不能有
	处理不能重复
	如何做
		先实现功能
		打磨代码
		分解函数
		改名
		消除重复
		测试通过
		
注释
	理解
		尽量少的注释，用代码来阐述
	好的注释
		必要的法律信息
		对意图注释
		参数或返回值
			是某个标准库的一部分
			不能修改代码，适当使用注释释其意
		todo注释
		放大不合理之物重要性
	坏的注释
		废话注释
			多余注释
				无关的信息
		误导注释
			与函数处理不符
		注释的代码
			应删除
			
边界
	第三方代码
		对其封装成类或者近亲类
			第三方接口准求普适性，过于灵活和丰富
			我们仅需暴露部分接口，就要对其封装
		学习性测试
			仅对使用的代码编写测试
			聚焦于想从API得到的东西
			第三方代码存在问题，会立即发现问题
		使用尚不存在的代码
			首先编写想要得到的接口
			然后通过Adapter模式将我们的接口转换为第三方接口 ？？？

单元测试
	TDD三定律   ???
		定律一 在编写不能通过的单元测试前，不可编写生成代码
		定律二 只可编写刚好无法通过的单元测试，不能编译也不算通过
		定律三 只可编写刚好足以通过的当前失败测试的生产代码  
	时刻保持测试代码的整洁
		重要性
			测试和生成代码一样重要
			测试可以使我们大胆的修改代码
		实现
			三要素
				可读性，可读性，可读性：简洁、明确、足够的表达力
			三环节
				构造测试数据-操作数据-检验数据
	每个测试一个概念
		可以有多个断言，但是不要处理多个概念
		公用的构造函数可以提取出来
	FIRST原则
		快速（Fast） 测试应该够快
		独立（Independent）	测试应该相互独立，不依赖其他的测试，不依赖顺序
		可重复性（Repeatable） 
		自足验证（Self-Validating） 测试应该有明确返回结果的输出，不依赖于内部的打印等
		及时（Timely） 测试应该恰好在其生产代码之前编写
