DDD架构：

四层模型:
a User-Interface
b Application-Interface
c Domain-Interface     ----- DCI
d Infra-Interface

DCI:
Data: 系统有哪些领域概念及其之间的关系，该层专注于领域对象的确立和这些对象的生命周期管理及关系   Object
Context:只是找到合适的role，让role交互起来完成业务逻辑即可
Interactive:对role的建模，role是每个context中复杂的业务逻辑的真正执行者   Role

五层模型:
a User-Interface
b Application-Interface
c Context-Interface          以上下文为单位，将Domain层的领域对象cast成合适的role
d Domain-Interface     ----- DI
e Infra-Interface


六层模型:
a User-Interface
b Application-Interface      ---- Scheduler
c Transaction               大Context层对应一个事务处理，由一个Action序列组成
c Context-Interface         Context层处理单位为Action，对应一条同步消息或异步消息
d Domain-Interface     ----- DI
e Infra-Interface

User Interface: 用户接口层，主要用于处理用户发送的Restful请求和解析用户输入的配置文件等，并将信息传递给Scheduler层的接口。
Scheduler: 调度层，负责多进程管理及调度、多线程管理及调度、多协程调度和维护业务实例的状态模型。当调度层收到用户接口层的请求后，委托Transaction层与本次操作相关的事务进行处理。
Transaction: 事务层，对应一个业务流程，比如UE Attach，将多个同步消息或异步消息的处理序列组合成一个事务，而且在大多场景下，都有选择结构。万一事务执行失败，则立即进行回滚。当事务层收到调度层的请求后，委托Context层的Action进行处理，常常还伴随使用Context层的Specification（谓词）进行Action的选择。
Context: 环境层，以Action为单位，处理一条同步消息或异步消息，将Domain层的领域对象cast成合适的role，让role交互起来完成业务逻辑。环境层通常也包括Specification的实现，即通过Domain层的知识去完成一个条件判断。
Domain: 领域层，定义领域模型，不仅包括领域对象及其之间关系的建模，还包括对象的角色role的显式建模。
Infrastructure: 是基础实施层，为其他层提供通用的技术能力：业务平台，编程框架，持久化机制，消息机制，第三方库的封装，通用算法，等等。
